name: Build Iris

# Controls when the action will run.
on:
  # Triggers the workflow on a schedule.
  schedule:
    # The 'cron' syntax schedules the workflow to run at 00:00 UTC every day.
    # Format: minute hour day(of-month) month day(of-week)
    - cron: '0 0 * * *'
  
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel.
jobs:
  # Defines a job with the ID 'build-and-release'.
  build-and-release:
    # The type of runner that the job will run on. 'ubuntu-latest' is a good default.
    runs-on: ubuntu-latest

    # These permissions are necessary for the action to create a release and upload assets.
    permissions:
      contents: write

    # A sequence of tasks that will be executed as part of the job.
    steps:
      # Step 1: Check out the repository code.
      # This action checks-out your repository under $GITHUB_WORKSPACE, so your job can access it.
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This specifies the repository to check out. 
          repository: 'VolmitSoftware/Iris'
          # This places the repository contents in a directory named 'Iris'.
          path: 'Iris'

      # Step 2: Set up the Java environment.
      # This action sets up a Java JDK by downloading and caching a distribution.
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin' # A popular, open-source distribution of OpenJDK.
          cache: 'gradle' # Caches Gradle dependencies to speed up future builds.

      # Step 3: Make the Gradle wrapper executable.
      # On Unix-like systems, the gradlew script needs execute permissions to run.
      - name: Grant execute permission to gradlew
        working-directory: ./Iris
        run: chmod +x ./gradlew

      # Step 4: Build the project using the Gradle wrapper.
      # This runs the 'iris' task defined in your build.gradle file.
      - name: Build with Gradle
        working-directory: ./Iris
        run: ./gradlew iris

      # Step 5: Create a GitHub Release and upload the build artifact.
      # This uses a popular community action to handle release creation.
      - name: Create Release and Upload Artifact
        uses: softprops/action-gh-release@v1
        with:
          # The tag for the release. Using the run number ensures it's unique.
          tag_name: daily-build-${{ github.run_number }}
          # The title of the release.
          name: Daily Build ${{ github.run_number }}
          # The body/description of the release. You can use markdown here.
          body: |
            Automated daily build generated by GitHub Actions.
            - **Commit:** `${{ github.sha }}`
            - **Triggered by:** `${{ github.event_name }}`
          # A list of files to upload as release assets.
          # The wildcard (*) matches the dynamic version number in the JAR file name.
          # This path should now correctly point to the build artifact.
          files: |
            Iris/build/Iris-*.jar
        env:
          # The GITHUB_TOKEN is automatically created by Actions and is required to authenticate.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
